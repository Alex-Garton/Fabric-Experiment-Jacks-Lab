//Jacks June 3, 2024
//combined stepper motor and load cell code
// load cell calibration separate
//may use Rob Tillart's load cell library

/////////////////////////////
//load cell preliminaries
#include "HX711.h"

const int LOADCELL_DOUT_PIN = 2;
const int LOADCELL_SCK_PIN = 3;


HX711 scale; 

//calibration factor = (reading)/(known weight)
//calibration factor = -636045 / 6N = -106007.5 enter this in 'scale.set_scale()' below

///////////////////////////////////
//stepper motor preliminaries

// defines pins numbers
const int stepPin = 9; 
const int dirPin = 8;

///////////////////////////////////
//switch preliminary

//defines switch pin
const int switchPin = 13;

////////////////////////////////

void setup() {
  //////////////////////////////
  //load cell
  Serial.begin(9600);
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);

  scale.set_scale(-106007.5);
  scale.tare();

 
  /////////////////////////////
  //set stepper motor output pins
  pinMode(stepPin,OUTPUT); 
  pinMode(dirPin,OUTPUT);


  ////////////////////////////
  //switch
  pinMode(switchPin,INPUT);


}

void loop() {
  ///////////////////////////
  //turn switch to the on position to start code
  while (digitalRead(switchPin) == 0) {}


  ///////////////////////////
  //first move stepper motor and record how many steps and in what direction
  

  const int dir_var = HIGH;
  digitalWrite(dirPin,dir_var); // Enables the motor to move clockwise (up)
  //200 pulses is one full cycle rotation
  //step size is number of pulses

  ////////////////////////////
  //load cell takes reading, then stepper motor moves; repeats until i = num_steps


  

  const int num_steps = 500 //placeholder value; represents number of steps before changing direction
  for (int i = 0; i < num_steps; i++) {

    Serial.print("one reading:\t");
    Serial.print(scale.get_units(),1);
    Serial.print("\t| average:\t");
    Serial.println(scale.get_units(10),5);
    delay(1000); // One second delay

    //this loop executes a single step
    const int step_size = 4; //sets the step size
    for(int x = 0; x < step_size; x++) {    
      digitalWrite(stepPin,HIGH); 
      delayMicroseconds(1500); //this sets rotational speed; if too low, motor doesn't have enough torque
      digitalWrite(stepPin,LOW); 
      delayMicroseconds(1500); 
  }
  
  }
  
  Serial.print("\t| step size:\t");
  Serial.print(step_size);
  Serial.print("\t| step direction:\t");

  if (dirPin==HIGH) {
    Serial.print("\t up \t");
  }

  if (dirPin==LOW) {
    Serial.print("\t down \t");
  }
  

  digitalWrite(dirPin,LOW); //counterclockwise (down)
  
  ////////////////////////////
  //load cell takes reading, then stepper motor moves; repeats until i = num_steps

  const int num_steps = 500 //placeholder value; represents number of steps before changing direction
  for (int i = 0; i < num_steps; i++) {

    Serial.print("one reading:\t");
    Serial.print(scale.get_units(),1);
    Serial.print("\t| average:\t");
    Serial.println(scale.get_units(10),5);
    delay(1000); // One second delay

    //this loop executes a single step
    const int step_size = 50; //sets the step size
    for(int x = 0; x < step_size; x++) {    
      digitalWrite(stepPin,HIGH); 
      delayMicroseconds(1500); //this sets rotational speed; if too low, motor doesn't have enough torque
      digitalWrite(stepPin,LOW); 
      delayMicroseconds(1500); 
  }
  
  
  }
  
  Serial.print("\t| step size:\t");
  Serial.print(step_size);
  Serial.print("\t| step direction:\t");

  if (dirPin==HIGH) {
    Serial.print("\t up \t");
  }

  if (dirPin==LOW) {
    Serial.print("\t down \t");
  }
  
  delay(1000);
  
  ///////////////////////////////////////////
  //...then take corresponding load cell reading
  Serial.print("one reading:\t");
  Serial.print(scale.get_units(),1);
  Serial.print("\t| average:\t");
  Serial.println(scale.get_units(10),5);

  scale.power_down();
  delay(5000);
  scale.power_up();
  

}
