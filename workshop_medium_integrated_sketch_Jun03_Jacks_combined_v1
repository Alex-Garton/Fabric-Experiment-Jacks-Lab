//Jacks June 3, 2024
//combined stepper motor and load cell code
// load cell calibration separate
//may use Rob Tillart's load cell library

/////////////////////////////
//load cell preliminaries
#include "HX711.h"

const int LOADCELL_DOUT_PIN = 2;
const int LOADCELL_SCK_PIN = 3;

HX711 scale; 

//calibration factor = (reading)/(known weight)
float calibration_factor = 1; //enter calibration factor from calibration step here

///////////////////////////////////
//stepper motor preliminaries

// defines pins numbers
const int stepPin = 9; 
const int dirPin = 8;
const int switchPin= 13;
const int buttonPin = 12;

////////////////////////////////
//logical flow preliminaries
bool tare_done = false;

void setup() {
  //////////////////////////////
  //load cell
  Serial.begin(9600);
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);

  scale.set_scale(calibration_factor);


  /////////////////////////////
  //set stepper motor output pins
  pinMode(stepPin,OUTPUT); 
  pinMode(dirPin,OUTPUT);
  pinMode(switchPin, INPUT);
  pinMode(buttonPin, INPUT);


}

void loop() {
  ///////////////////////////
  //first move stepper motor and record how many steps and in what direction
  
  while (digitalRead(switchPin) == 0) {};
  
  if (scale.is_ready()){
    scale.set_scale();
    if (!tare_done){
    Serial.println("Press button to tare...");
    
    while (digitalRead(buttonPin) == 0) {}  //holds here until button is pressed
   
    scale.tare();  //tare the scale
    Serial.println("Tare complete...");
    tare_done = true;
    delay(300);
    }

    else {};


  int dir_var = HIGH;
  digitalWrite(dirPin, HIGH); // Enables the motor to move clockwise (up)
  //200 pulses is one full cycle rotation
  //step size is number of pulses
  const int step_size = 50; //sets the step size
  for(int x = 0; x < step_size; x++) {
    digitalWrite(stepPin,HIGH); 
    delayMicroseconds(1500); //this sets rotational speed; if too low, motor doesn't have enough torque
    digitalWrite(stepPin,LOW); 
    delayMicroseconds(1500); 
  }
  delay(1000); // One second delay
  
  Serial.print("\t| step size:\t");
  Serial.print(step_size);
  Serial.print("\t| step direction:");
  if (dir_var==HIGH) {
    Serial.print("\t up \t");
  }

  if (dir_var==LOW) {
    Serial.print("\t down \t");
  }
   ///////////////////////////////////////////
  //...then take corresponding load cell reading
  Serial.print("  | one reading:\t");
  Serial.print(scale.get_units(),3);
  Serial.print("\t| average:\t");
  Serial.println(scale.get_units(10),3);

  /* scale.power_down();
  delay(5000);
  scale.power_up(); */

  dir_var = LOW;
  digitalWrite(dirPin, dir_var); //counterclockwise (down)
  // Makes 400 pulses for making two full cycle rotation (down)
  //const int step_size = 50; //sets the step size
  for(int x = 0; x < step_size; x++) {
    digitalWrite(stepPin,HIGH); 
    delayMicroseconds(1500); //this sets rotational speed; if too low, motor doesn't have enough torque
    digitalWrite(stepPin,LOW); 
    delayMicroseconds(1500);
  }
  delay(1000);

  Serial.print("\t| step size:\t");
  Serial.print(step_size);
  Serial.print("\t| step direction:");
  if (dir_var==HIGH) {
    Serial.print("\t up \t");
  }

  if (dir_var==LOW) {
    Serial.print("\t down \t");
  
  ///////////////////////////////////////////
  //...then take corresponding load cell reading
  Serial.print("  | one reading:\t");
  Serial.print(scale.get_units(),3);
  Serial.print("\t| average:\t");
  Serial.println(scale.get_units(10),3);
  

  //scale.power_down();
  delay(1000);
  //scale.power_up();
  
  }
  }
}
